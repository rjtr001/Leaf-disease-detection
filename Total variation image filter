import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color

def total_variation_filter(image, num_iterations=100, beta=0.1):
    """
    Applies total variation filter to the given image.
    
    Args:
    image (2D numpy array): Input grayscale image.
    num_iterations (int): Number of iterations for the iterative process.
    beta (float): Step size for the iterative process.
    
    Returns:
    filtered_image (2D numpy array): Total variation filtered image.
    """
    # Convert image to grayscale if it's in color
    if len(image.shape) == 3:
        image = color.rgb2gray(image)
    
    # Convert image to float
    image = image.astype(np.float64)
    
    # Initialize filtered image
    filtered_image = np.copy(image)
    
    # Iterative process
    for _ in range(num_iterations):
        # Shift image to calculate differences between neighboring pixels
        shifted_up = np.roll(filtered_image, -1, axis=0)
        shifted_down = np.roll(filtered_image, 1, axis=0)
        shifted_left = np.roll(filtered_image, -1, axis=1)
        shifted_right = np.roll(filtered_image, 1, axis=1)
        
        # Calculate differences
        delta_x = shifted_right - filtered_image
        delta_y = shifted_down - filtered_image
        
        # Update image with differences
        filtered_image += beta * (delta_x + delta_y)
        
    return filtered_image


# Load image
image = io.imread(r"D:\Vit Bhopal\Research\Leaf\A Database of Leaf Images Practice towards Plant Conservation with Plant Pathology\Mango (P0)\diseased enchnaced\0012_0002.JPG")

# Apply total variation filter
filtered_image = total_variation_filter(image)

# Display original and filtered images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image, cmap='gray')
plt.title('Original Image')
plt.axis('off')
plt.subplot(1, 2, 2)
plt.imshow(filtered_image, cmap='gray')
plt.title('Total Variation Filtered Image')
plt.axis('off')
plt.show()
